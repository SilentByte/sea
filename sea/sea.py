# #
# # SEA / SMART ENGINEERING ASSISTANT
# # Copyright (c) 2024 SilentByte <https://silentbyte.com/>
# #


from typing import Any

from sea.config import SeaConfig

CONFIG = SeaConfig()


class SeaRuntime:
    def __init__(self, spark):
        self.spark = spark

    def spark_query(self, query: str, args: dict[str, Any] | list | None = None, **kwargs: Any) -> Any:
        print(query)
        return self.spark.sql(query, args, **kwargs)

    def initialize_spark(self):
        current_catalog = self.spark_query('SELECT current_catalog() AS name').collect()[0]['name']
        available_catalogs = [
            row['catalog']
            for row in self.spark_query('SHOW CATALOGS').collect()
        ]

        if current_catalog != CONFIG.catalog:
            if current_catalog not in available_catalogs:
                self.spark_query(f'CREATE CATALOG IF NOT EXISTS `{CONFIG.catalog}`')
                self.spark_query(f'ALTER CATALOG `{CONFIG.catalog}` OWNER TO `account users`')

            self.spark_query(f'CREATE SCHEMA IF NOT EXISTS `{CONFIG.catalog}`.`{CONFIG.schema}`')
            self.spark_query(f'GRANT CREATE, USAGE ON DATABASE `{CONFIG.catalog}`.`{CONFIG.schema}` TO `account users`')

        self.spark_query(f'USE `{CONFIG.catalog}`.`{CONFIG.schema}`')

        self.spark_query(f'CREATE VOLUME IF NOT EXISTS `{CONFIG.catalog}`.`{CONFIG.schema}`.`{CONFIG.volume}`')

        self.spark_query(r'''
            CREATE TABLE IF NOT EXISTS documents (
                id                  BIGINT GENERATED BY DEFAULT AS IDENTITY,
                file_name           STRING,
                file_hash           STRING,
                file_size           BIGINT,
                file_timestamp      TIMESTAMP,
                content             BINARY,
                created_on          TIMESTAMP
            )
        ''')

        self.spark_query(r'''
            CREATE TABLE IF NOT EXISTS document_vectors (
                id                  BIGINT GENERATED BY DEFAULT AS IDENTITY,
                file_name           STRING,
                file_hash           STRING,
                start_page_no       INT,
                end_page_no         INT,
                content             STRING,
                embedding           ARRAY<FLOAT>,
                created_on          TIMESTAMP
            ) TBLPROPERTIES (delta.enableChangeDataFeed = true)
        ''')
